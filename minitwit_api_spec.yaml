openapi: 3.0.0
info:
  title: Minitwit Simualtor API
  description: This is a demo of Minitwit Simualtor API using OpenAPI spec
  contact:
    email: niss@itu.dk
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: /
paths:
  /latest:
    get:
      summary: Get latest accpeted id
      responses:
        "200":
          description: returns latest accepted id by api
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LatestResponse'
  /register:
    post:
      summary: Post new user to register
      parameters:
      - name: latest
        in: query
        description: latest id sent by simulator api
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/RegisterUserBody'
      responses:
        "204":
          description: User registered
        "400":
          description: Error on insert with description
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegisterErrorResponse'
  /msgs:
    get:
      summary: Get number of messages from system
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: Basic c2ltdWxhdG9yOnN1cGVyX3NhZmUh
      - name: "no"
        in: query
        description: Number of messages to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: latest
        in: query
        description: latest id sent by simulator api
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Message created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListOfMessageDTO'
  /msgs/{username}:
    get:
      summary: Find messages by username
      description: Returns messages by username
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: Basic c2ltdWxhdG9yOnN1cGVyX3NhZmUh
      - name: username
        in: path
        description: username of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: niss
      - name: "no"
        in: query
        description: pass an optional search string for looking up inventory
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: latest
        in: query
        description: latest id sent by simulator api
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfMessageDTO'
            application/xml:
              schema:
                $ref: '#/components/schemas/LatestResponse'
        "401":
          description: Unauthorized
        "404":
          description: User not found
    post:
      summary: Find messages by username
      description: Returns messages by username
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: Basic c2ltdWxhdG9yOnN1cGVyX3NhZmUh
      - name: username
        in: path
        description: username of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: niss
      - name: latest
        in: query
        description: latest id sent by simulator api
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/MessageBody'
      responses:
        "204":
          description: successful operation
        "401":
          description: Unauthorized
        "500":
          description: Invalid username supplied
  /fllws/{username}:
    get:
      summary: Find messages by username
      description: Returns messages by username
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: Basic c2ltdWxhdG9yOnN1cGVyX3NhZmUh
      - name: username
        in: path
        description: username of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: niss
      - name: "no"
        in: query
        description: pass an optional search string for looking up inventory
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: latest
        in: query
        description: latest id sent by simulator api
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFollowersDTO'
        "401":
          description: Unauthorized
        "404":
          description: User not found
    post:
      summary: Find messages by username
      description: Returns messages by username
      parameters:
      - name: Authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: Basic c2ltdWxhdG9yOnN1cGVyX3NhZmUh
      - name: username
        in: path
        description: username of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: niss
      - name: latest
        in: query
        description: latest id sent by simulator api
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/FollowBody'
      responses:
        "204":
          description: successful operation
        "401":
          description: Unauthorized
        "404":
          description: User not found
components:
  schemas:
    LatestResponse:
      required:
      - latest
      type: object
      properties:
        latest:
          type: integer
          example: 23592
    RegisterErrorResponse:
      required:
      - error_msg
      - status
      type: object
      properties:
        status:
          type: integer
          example: 400
        error_msg:
          type: string
          example: error
    MessageDTO:
      required:
      - content
      - pub_date
      - user
      type: object
      properties:
        content:
          type: string
          example: Hello, up for coffee later?
        pub_date:
          type: string
          format: date-time
        user:
          type: string
          example: niss
    ListOfMessageDTO:
      required:
      - filtered_msgs
      type: object
      properties:
        filtered_msgs:
          type: array
          items:
            $ref: '#/components/schemas/MessageDTO'
    MessageCreateDTO:
      required:
      - content
      type: object
      properties:
        content:
          type: string
          example: Hey, whats up?
    FollowDTO:
      type: object
      properties:
        follow:
          type: string
          example: niss
    UnfollowDTO:
      type: object
      properties:
        unfollow:
          type: string
          example: niss
    UserFollowDTO:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          example: niss
    UserFollowersDTO:
      required:
      - follows
      type: object
      properties:
        follows:
          type: array
          items:
            $ref: '#/components/schemas/UserFollowDTO'
    UserCreateDTO:
      required:
      - email
      - pwd
      - username
      type: object
      properties:
        username:
          type: string
          example: Christoffer Nissen
        email:
          type: string
          example: niss@itu.dk
        pwd:
          type: string
          example: securepwd
  requestBodies:
    FollowBody:
      content:
        application/json:
          schema:
            oneOf:
            - $ref: '#/components/schemas/FollowDTO'
            - $ref: '#/components/schemas/UnfollowDTO'
          example:
            follow: niss
    MessageBody:
      description: Message object that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageCreateDTO'
      required: true
    RegisterUserBody:
      description: User object that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserCreateDTO'
      required: true